https://samples.dj4e.com

Django prepara tres partes distintas del trabajo relativo a los formularios:

-Preparing and restructuring data to make it ready for rendering.
-Creating HTML forms for the data.
-Receiving and processing submitted forms and data from the client.

# Confirmation forms son importantes

It is possible to write code that does all of this manually, but Django can take care of it all for you.

django forms like glue:

-Generate necessary HTML to send to the browser
    -Allow for consistent look and feel across all teh forms in an application
-Receive the POST data coming back from the browser
-Validate the incoming POST data and produce HTML for an error screen if necessary
-Move the data from the form into a model and then store it in the database automatically

Ejemplo:

Esto en forms.py

from django import forms
from django.core.exceptions import ValidarionError
from django.core import validators

class BasicForm(form.Form):
    title = forms.CharField(validators = [
        validators.MinLenghtValidator(2, "Please enter two or more characters")])
    mileage = forms.IntegerField()
    purchase_date = forms.DateField()

Esto en views.py:

def example(request):
    form = BasicForm()
    return HttpResponse(form.as_table())   # Te lo devuelve como una tabla en código html, no es útil per se


En HTML templates:

<form action='' method="post">
    {% csrf_token %}
    <table>
    {{ form.as_table }} #Aquí sí renta
    </table>
    <input type="submit" value="Submit">
    <input type="submit" onclick="window.location='{% url 'form:main' %}' ; return false;" value="Cancel">
</form>

En views.py:

class SimpleCreate(DumpPostView):
    def get(self, request):
        form = BasicForm()
        ctx = {'form':form}
        return render(request, 'form/form.html', ctx) # Devuelve el html + el diccionario con el formulario -una clase de forms.py-.

# -------------- ModelForms ------------- #

from django.forms import ModelForm
from models import model

class MakeForm(ModelForm):
    class Meta:
    model = Make  -> Este es el modelo
    fields = '__all__'

NOTA: Revisar Reverse y reverse_lazy

Autocreación de formularios en base a un modelo:

from django.views.generic.edit import CreateView, UpdateView, DeleteView

class AutoCreate(LoginRequiredMixin, CreateView):
    model = model
    fields = '__all__'
    success_url = reverse_lazy(autos:all) Aplicación/template -creo-


# VALIDATORS

Ejemplo:

class BasicForm(form.Form):
    title = forms.CharField(validators=[validators.MinLengthValidator(2, 'Please Enter 2 or more characters')]) # Ejemplo de validators, sobre el propio campo.
    mileage = forms.IntegerField()
    purchase_date = forms.DateField()